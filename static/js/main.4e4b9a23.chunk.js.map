{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","ResponseStatuses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","loginParams","post","delete","todolistsAPI","title","id","put","todolistId","taskId","taskTitile","model","handleServerNetworkError","dispatch","errMessage","setAppError","error","setAppStatus","status","handleServerAppError","data","messages","length","slice","createSlice","name","initialState","reducers","removeTodolist","state","action","index","findIndex","todolist","payload","splice","addTodolist","unshift","filter","entityStatus","changeTodolistTitle","changeTodolistFilter","changeTodolistEntityStatus","setTodolists","todolists","map","clearTodolistsData","todolistsReducer","reducer","actions","isLoggedIn","setIsLoggedIn","authReducer","isInitialized","setIsInitialized","appReducer","removeTask","tasks","task","addTask","todoListId","updateTask","changeTaskEntityStatus","setTasks","extraReducers","builder","addCase","forEach","tasksReducer","fetchTasksTC","res","items","catch","err","message","updateTaskTC","domainModel","getState","find","t","apiModel","deadline","description","priority","startDate","resultCode","Success","console","warn","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","changeTaskStatus","changeTaskTitle","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","Active","onTitleChangeHandler","newValue","className","Checkbox","Delete","Todolist","changeFilter","onTaskAdd","onTodolistTitleChange","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksOfTodolist","style","paddingTop","Button","TodolistsList","useDispatch","useSelector","useEffect","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistTC","changeTodolistTitleTC","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e4b9a23.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { RequestStatusType } from \"../app/app-reducer\";\n\nexport type TodolistType = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\nexport type ResponseType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  data: D;\n};\n\nexport enum TaskStatuses {\n  Active = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  High = 2,\n  Urgent = 3,\n  Irrelevant = 4,\n}\n\nexport enum ResponseStatuses {\n  Success = 0,\n  Error = 1,\n  Captcha = 10,\n}\n\nexport type TaskType = {\n  description: string;\n  title: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n  entityStatus: RequestStatusType;\n};\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n};\ntype GetTasksResponse = {\n  error: string | null;\n  totalCount: number;\n  items: TaskType[];\n};\nexport type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: string;\n};\ntype GetAuthMeDataType = {\n  id: number;\n  email: string;\n  login: string;\n};\n// TYPES\n\nconst instance = axios.create({\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n  withCredentials: true,\n  headers: {\n    \"API-KEY\": \"264a0581-6cdc-4a28-9b7e-b8b5b1060aa0\",\n  },\n});\n\nexport const authAPI = {\n  me() {\n    return instance.get<ResponseType<GetAuthMeDataType>>(\"auth/me\");\n  },\n  login(loginParams: LoginParamsType) {\n    return instance.post<ResponseType<{ userId?: number }>>(\n      \"auth/login\",\n      loginParams\n    );\n  },\n  logout() {\n    return instance.delete<ResponseType>(\"auth/login\");\n  },\n};\n\nexport const todolistsAPI = {\n  getTodolists() {\n    return instance.get<TodolistType[]>(\"todo-lists\");\n  },\n  createTodolist(title: string) {\n    return instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", {\n      title: title,\n    });\n  },\n  deleteTodolist(id: string) {\n    return instance.delete<ResponseType>(`todo-lists/${id}`);\n  },\n  updateTodolist(id: string, title: string) {\n    return instance.put<ResponseType>(`todo-lists/${id}`, {\n      title: title,\n    });\n  },\n  getTasks(todolistId: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n  },\n  deleteTask(todolistId: string, taskId: string) {\n    return instance.delete<ResponseType>(\n      `todo-lists/${todolistId}/tasks/${taskId}`\n    );\n  },\n  createTask(todolistId: string, taskTitile: string) {\n    return instance.post<ResponseType<{ item: TaskType }>>(\n      `todo-lists/${todolistId}/tasks`,\n      { title: taskTitile }\n    );\n  },\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n    return instance.put<ResponseType<TaskType>>(\n      `todo-lists/${todolistId}/tasks/${taskId}`,\n      model\n    );\n  },\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Dispatch } from \"redux\";\nimport { ResponseType } from \"../api/todolists-api\";\nimport { setAppError, setAppStatus } from \"../app/app-reducer\";\n\nexport const handleServerNetworkError = (\n  dispatch: Dispatch,\n  errMessage: string\n) => {\n  dispatch(setAppError({ error: errMessage }));\n  dispatch(setAppStatus({ status: \"failed\" }));\n};\n\nexport const handleServerAppError = <T>(\n  /* <T> - BEFORE arguments list === type of generic function - will be captured on generic function call ! T === TaskType when called from tasks-reducer.ts ; T === TodolistType when called from todolists-reducer.ts */\n  dispatch: Dispatch,\n  data: ResponseType<T>\n) => {\n  if (data.messages.length) {\n    dispatch(setAppError({ error: data.messages[0] }));\n  } else {\n    dispatch(setAppError({ error: \"Error occurred\" }));\n  }\n  dispatch(setAppStatus({ status: \"failed\" }));\n};\n","import {\n  ResponseStatuses,\n  todolistsAPI,\n  TodolistType,\n} from \"../../api/todolists-api\";\nimport { RequestStatusType, setAppStatus } from \"../../app/app-reducer\";\nimport { AxiosError } from \"axios\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { fetchTasksTC } from \"./tasks-reducer\";\nimport { AppThunkType } from \"../../app/store\";\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistDomainType = TodolistType & {\n  filter: FilterValuesType;\n  entityStatus: RequestStatusType;\n};\n// TYPES\n\nconst initialState: Array<TodolistDomainType> = [];\n\nconst slice = createSlice({\n  name: \"todolists\",\n  initialState,\n  reducers: {\n    removeTodolist(state, action: PayloadAction<{ id: string }>) {\n      // findind index of todolist to be removed\n      const index = state.findIndex(\n        (todolist) => todolist.id === action.payload.id\n      );\n      // if index was found\n      if (index !== -1) {\n        // delete 1 element from state starting at index\n        state.splice(index, 1);\n      }\n    },\n    addTodolist(state, action: PayloadAction<{ todolist: TodolistType }>) {\n      state.unshift({\n        ...action.payload.todolist,\n        filter: \"all\",\n        entityStatus: \"idle\",\n      }); // state.unshift() - adding to the beginning of state array\n    },\n    changeTodolistTitle(\n      state,\n      action: PayloadAction<{ id: string; title: string }>\n    ) {\n      const index = state.findIndex(\n        (todolist) => todolist.id === action.payload.id\n      );\n      if (index !== -1) {\n        state[index].title = action.payload.title;\n      }\n    },\n    changeTodolistFilter(\n      state,\n      action: PayloadAction<{ id: string; filter: FilterValuesType }>\n    ) {\n      const index = state.findIndex(\n        (todolist) => todolist.id === action.payload.id\n      );\n      if (index !== -1) {\n        state[index].filter = action.payload.filter;\n      }\n    },\n    changeTodolistEntityStatus(\n      state,\n      action: PayloadAction<{\n        id: string;\n        entityStatus: RequestStatusType;\n      }>\n    ) {\n      const index = state.findIndex(\n        (todolist) => todolist.id === action.payload.id\n      );\n      if (index !== -1) {\n        state[index].entityStatus = action.payload.entityStatus;\n      }\n    },\n    setTodolists(\n      state,\n      action: PayloadAction<{ todolists: Array<TodolistType> }>\n    ) {\n      return action.payload.todolists.map((todolist) => ({\n        ...todolist,\n        filter: \"all\",\n        entityStatus: \"idle\",\n      }));\n    },\n    clearTodolistsData(state) {\n      return (state = [] as Array<TodolistDomainType>);\n    },\n  },\n});\n// ffe\nexport const todolistsReducer = slice.reducer;\nexport const {\n  changeTodolistEntityStatus,\n  changeTodolistFilter,\n  changeTodolistTitle,\n  removeTodolist,\n  setTodolists,\n  clearTodolistsData,\n  addTodolist,\n} = slice.actions;\n\nexport const fetchTodolistsTC = (): AppThunkType => (dispatch) => {\n  dispatch(setAppStatus({ status: \"loading\" }));\n  todolistsAPI\n    .getTodolists()\n    .then((res) => {\n      dispatch(setTodolists({ todolists: res.data }));\n      dispatch(setAppStatus({ status: \"succeeded\" }));\n      // explicitly setting fetched todolists as resolved promise value\n      return res.data;\n    })\n    .then((todolists) => {\n      // forEach has no return value (undefined)\n      todolists.forEach((todolist) => {\n        dispatch(fetchTasksTC(todolist.id));\n      });\n    })\n    .catch((err: AxiosError) => {\n      handleServerNetworkError(dispatch, err.message);\n    });\n};\nexport const removeTodolistTC = (id: string): AppThunkType => (dispatch) => {\n  dispatch(setAppStatus({ status: \"loading\" }));\n  dispatch(changeTodolistEntityStatus({ id, entityStatus: \"loading\" })); // no need to change entityStatus later - todolist will be deleted\n  todolistsAPI\n    .deleteTodolist(id)\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatuses.Success) {\n        dispatch(removeTodolist({ id }));\n        dispatch(setAppStatus({ status: \"succeeded\" }));\n      } else {\n        handleServerAppError(dispatch, res.data);\n      }\n    })\n    .catch((err: AxiosError) => {\n      handleServerNetworkError(dispatch, err.message);\n    });\n};\nexport const changeTodolistTitleTC = (\n  id: string,\n  title: string\n): AppThunkType => (dispatch) => {\n  dispatch(setAppStatus({ status: \"loading\" }));\n  dispatch(changeTodolistEntityStatus({ id, entityStatus: \"loading\" }));\n  todolistsAPI\n    .updateTodolist(id, title)\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatuses.Success) {\n        dispatch(changeTodolistTitle({ id, title }));\n        dispatch(setAppStatus({ status: \"succeeded\" }));\n        dispatch(changeTodolistEntityStatus({ id, entityStatus: \"succeeded\" }));\n      } else {\n        handleServerAppError(dispatch, res.data);\n        dispatch(changeTodolistEntityStatus({ id, entityStatus: \"failed\" }));\n      }\n    })\n    .catch((err: AxiosError) => {\n      handleServerNetworkError(dispatch, err.message);\n    });\n};\nexport const addTodolistTC = (title: string): AppThunkType => (dispatch) => {\n  dispatch(setAppStatus({ status: \"loading\" }));\n  todolistsAPI\n    .createTodolist(title)\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatuses.Success) {\n        dispatch(addTodolist({ todolist: res.data.data.item }));\n        dispatch(setAppStatus({ status: \"succeeded\" }));\n      } else {\n        handleServerAppError(dispatch, res.data);\n      }\n    })\n    .catch((err: AxiosError) => {\n      handleServerNetworkError(dispatch, err.message);\n    });\n};\n// TCs\n","import { setAppStatus } from \"../../app/app-reducer\";\nimport {\n  authAPI,\n  LoginParamsType,\n  ResponseStatuses,\n} from \"../../api/todolists-api\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { clearTodolistsData } from \"../TodolistsList/todolists-reducer\";\nimport { AppThunkType } from \"../../app/store\";\n\nconst initialState = {\n  isLoggedIn: false,\n};\n\nconst slice = createSlice({\n  // generated action type const's will \"auth\" as a prefix\n  name: \"auth\",\n  initialState,\n  // reducers - analogue of switch cases in regular redux reducer\n  reducers: {\n    // setting type of action.payload\n    setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\n      // updating state as if it was mutable - due to immerjs, setIsLoggedIn receives state \"draft\" instead of actual state and returns immutably-updated state  !\n      state.isLoggedIn = action.payload.isLoggedIn;\n    },\n  }, // default - return state - realised by redux toolkit behind the scenes !\n});\n\nexport const authReducer = slice.reducer;\nexport const { setIsLoggedIn } = slice.actions;\n\nexport const loginTC = (data: LoginParamsType): AppThunkType => (dispatch) => {\n  dispatch(setAppStatus({ status: \"loading\" }));\n  authAPI\n    .login(data)\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatuses.Success) {\n        // passing object inside of AC call !\n        dispatch(setIsLoggedIn({ isLoggedIn: true }));\n        dispatch(setAppStatus({ status: \"succeeded\" }));\n      } else {\n        handleServerAppError(dispatch, res.data);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(dispatch, error);\n    });\n};\nexport const logoutTC = (): AppThunkType => (dispatch) => {\n  dispatch(setAppStatus({ status: \"loading\" }));\n  authAPI\n    .logout()\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatuses.Success) {\n        dispatch(setIsLoggedIn({ isLoggedIn: false }));\n        dispatch(setAppStatus({ status: \"succeeded\" }));\n        dispatch(clearTodolistsData());\n      } else {\n        handleServerAppError(dispatch, res.data);\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(dispatch, error);\n    });\n};\n// TCs\n","import { handleServerNetworkError } from \"../utils/error-utils\";\nimport { setIsLoggedIn } from \"../features/Login/auth-reducer\";\nimport { authAPI, ResponseStatuses } from \"../api/todolists-api\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunkType } from \"./store\";\n\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"; // if \"loading\" - show Preloader\nexport type ErrorType = string | null;\nexport type AppInitialStateType = typeof initialState;\n// TYPES\n\nconst initialState = {\n  status: \"idle\" as RequestStatusType,\n  error: null as ErrorType,\n  isInitialized: false,\n};\n\nconst slice = createSlice({\n  name: \"app\",\n  initialState,\n  reducers: {\n    setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\n      state.status = action.payload.status;\n    },\n    setAppError(state, action: PayloadAction<{ error: ErrorType }>) {\n      state.error = action.payload.error;\n    },\n    setIsInitialized(state, action: PayloadAction<{ isInitialized: boolean }>) {\n      state.isInitialized = action.payload.isInitialized;\n    },\n  },\n});\n\nexport const appReducer = slice.reducer;\nexport const { setAppStatus, setAppError, setIsInitialized } = slice.actions;\n\nexport const initializeAppTC = (): AppThunkType => (dispatch) => {\n  authAPI\n    .me()\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatuses.Success) {\n        dispatch(setIsLoggedIn({ isLoggedIn: true }));\n      }\n    })\n    .catch((error) => {\n      handleServerNetworkError(dispatch, error);\n    })\n    .finally(() => {\n      dispatch(setIsInitialized({ isInitialized: true }));\n    });\n};\n// TCs\n","import {\n  ResponseStatuses,\n  TaskPriorities,\n  TaskStatuses,\n  TaskType,\n  todolistsAPI,\n  UpdateTaskModelType,\n} from \"../../api/todolists-api\";\nimport { AppRootStateType, AppThunkType } from \"../../app/store\";\nimport {\n  RequestStatusType,\n  setAppError,\n  setAppStatus,\n} from \"../../app/app-reducer\";\nimport { AxiosError } from \"axios\";\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from \"../../utils/error-utils\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  addTodolist,\n  clearTodolistsData,\n  removeTodolist,\n  setTodolists,\n} from \"./todolists-reducer\";\n\nexport type UpdateDomainTaskModelType = {\n  title?: string;\n  description?: string;\n  status?: TaskStatuses;\n  priority?: TaskPriorities;\n  startDate?: string;\n  deadline?: string;\n};\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>;\n};\n// TYPES\n\nconst initialState: TasksStateType = {};\n\nconst slice = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n    removeTask(\n      state,\n      action: PayloadAction<{ taskId: string; todolistId: string }>\n    ) {\n      const tasks = state[action.payload.todolistId];\n      const index = tasks.findIndex(\n        (task) => task.id === action.payload.taskId\n      );\n      if (index !== -1) {\n        tasks.splice(index, 1);\n      }\n    },\n    addTask(state, action: PayloadAction<{ task: TaskType }>) {\n      state[action.payload.task.todoListId].unshift(action.payload.task);\n    },\n    updateTask(\n      state,\n      action: PayloadAction<{\n        taskId: string;\n        model: UpdateDomainTaskModelType;\n        todolistId: string;\n      }>\n    ) {\n      const tasks = state[action.payload.todolistId];\n      const index = tasks.findIndex(\n        (task) => task.id === action.payload.taskId\n      );\n      if (index !== -1) {\n        tasks[index] = { ...tasks[index], ...action.payload.model };\n      }\n    },\n    changeTaskEntityStatus(\n      state,\n      action: PayloadAction<{\n        todolistId: string;\n        taskId: string;\n        entityStatus: RequestStatusType;\n      }>\n    ) {\n      const tasks = state[action.payload.todolistId];\n      const index = tasks.findIndex(\n        (task) => task.id === action.payload.taskId\n      );\n      if (index !== -1) {\n        tasks[index].entityStatus = action.payload.entityStatus;\n      }\n    },\n    setTasks(\n      state,\n      action: PayloadAction<{ tasks: Array<TaskType>; todolistId: string }>\n    ) {\n      state[action.payload.todolistId] = action.payload.tasks;\n    },\n  },\n  extraReducers(builder) {\n    builder.addCase(addTodolist, (state, action) => {\n      state[action.payload.todolist.id] = [];\n    });\n    builder.addCase(removeTodolist, (state, action) => {\n      delete state[action.payload.id];\n    });\n    builder.addCase(setTodolists, (state, action) => {\n      action.payload.todolists.forEach((todolist) => {\n        state[todolist.id] = [];\n      });\n    });\n    builder.addCase(clearTodolistsData, (state) => {\n      return (state = {} as TasksStateType);\n    });\n  }, // reducers/ACs imported from another reducer\n});\n\nexport const tasksReducer = slice.reducer;\nexport const {\n  changeTaskEntityStatus,\n  removeTask,\n  setTasks,\n  addTask,\n  updateTask,\n} = slice.actions;\n\nexport const fetchTasksTC = (todolistId: string): AppThunkType => (\n  dispatch\n) => {\n  dispatch(setAppStatus({ status: \"loading\" }));\n  todolistsAPI\n    .getTasks(todolistId)\n    .then((res) => {\n      if (!res.data.error) {\n        dispatch(setTasks({ tasks: res.data.items, todolistId }));\n        dispatch(setAppStatus({ status: \"succeeded\" }));\n      } else {\n        dispatch(setAppError({ error: \"Error occurred\" }));\n        dispatch(setAppStatus({ status: \"failed\" }));\n      }\n    })\n    .catch((err: AxiosError) => {\n      // err: AxiosError - type for errors returned by axios\n      handleServerNetworkError(dispatch, err.message);\n    });\n};\nexport const removeTaskTC = (\n  taskId: string,\n  todolistId: string\n): AppThunkType => (dispatch) => {\n  dispatch(setAppStatus({ status: \"loading\" }));\n  dispatch(\n    changeTaskEntityStatus({ todolistId, taskId, entityStatus: \"loading\" })\n  );\n  todolistsAPI\n    .deleteTask(todolistId, taskId)\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatuses.Success) {\n        dispatch(removeTask({ taskId, todolistId }));\n        dispatch(setAppStatus({ status: \"succeeded\" }));\n        dispatch(\n          changeTaskEntityStatus({\n            todolistId,\n            taskId,\n            entityStatus: \"succeeded\",\n          })\n        );\n      } else {\n        handleServerAppError(dispatch, res.data);\n        dispatch(\n          changeTaskEntityStatus({ todolistId, taskId, entityStatus: \"failed\" })\n        );\n      }\n    })\n    .catch((err: AxiosError) => {\n      handleServerNetworkError(dispatch, err.message);\n    });\n};\nexport const addTaskTC = (title: string, todolistId: string): AppThunkType => (\n  dispatch\n) => {\n  dispatch(setAppStatus({ status: \"loading\" }));\n  todolistsAPI\n    .createTask(todolistId, title)\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatuses.Success) {\n        dispatch(addTask({ task: res.data.data.item }));\n        dispatch(setAppStatus({ status: \"succeeded\" }));\n      } else {\n        handleServerAppError(dispatch, res.data);\n      }\n    })\n    .catch((err: AxiosError) => {\n      handleServerNetworkError(dispatch, err.message);\n    });\n};\nexport const updateTaskTC = (\n  taskId: string,\n  domainModel: UpdateDomainTaskModelType,\n  todolistId: string\n): AppThunkType => (dispatch, getState: () => AppRootStateType) => {\n  const state = getState();\n  const task = state.tasks[todolistId].find((t) => t.id === taskId);\n  if (!task) {\n    //throw new Error(\"task not found in the state\");\n    console.warn(\"task not found in the state\");\n    return;\n  }\n\n  const apiModel: UpdateTaskModelType = {\n    deadline: task.deadline,\n    description: task.description,\n    priority: task.priority,\n    startDate: task.startDate,\n    title: task.title,\n    status: task.status,\n    ...domainModel,\n  };\n\n  dispatch(setAppStatus({ status: \"loading\" }));\n  dispatch(\n    changeTaskEntityStatus({ todolistId, taskId, entityStatus: \"loading\" })\n  );\n  todolistsAPI\n    .updateTask(todolistId, taskId, apiModel)\n    .then((res) => {\n      if (res.data.resultCode === ResponseStatuses.Success) {\n        dispatch(updateTask({ taskId, model: domainModel, todolistId }));\n        dispatch(setAppStatus({ status: \"succeeded\" }));\n        dispatch(\n          changeTaskEntityStatus({\n            todolistId,\n            taskId,\n            entityStatus: \"succeeded\",\n          })\n        );\n      } else {\n        handleServerAppError(dispatch, res.data);\n        dispatch(\n          changeTaskEntityStatus({ todolistId, taskId, entityStatus: \"failed\" })\n        );\n      }\n    })\n    .catch((err: AxiosError) => {\n      handleServerNetworkError(dispatch, err.message);\n    });\n};\n// TCs\n","import { tasksReducer } from \"../features/TodolistsList/tasks-reducer\";\nimport { todolistsReducer } from \"../features/TodolistsList/todolists-reducer\";\nimport { combineReducers } from \"redux\";\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\";\nimport { appReducer } from \"./app-reducer\";\nimport { authReducer } from \"../features/Login/auth-reducer\";\nimport { configureStore, Action } from \"@reduxjs/toolkit\";\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\nexport type AppThunkType = ThunkAction<\n  void,\n  AppRootStateType,\n  unknown,\n  Action<string>\n>;\n\nconst rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todolists: todolistsReducer,\n  app: appReducer,\n  auth: authReducer,\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().prepend(thunkMiddleware),\n});\n\n// @ts-ignore\nwindow.store = store;\n","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\nimport { IconButton, TextField } from \"@material-ui/core\";\nimport { AddBox } from \"@material-ui/icons\";\nimport { RequestStatusType } from \"../../app/app-reducer\";\n\ntype AddItemFormPropsType = {\n  addItem: (title: string) => void;\n  entityStatus?: RequestStatusType;\n};\n\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\n  let [title, setTitle] = useState(\"\");\n  let [error, setError] = useState<string | null>(null);\n\n  const addItem = () => {\n    if (title.trim() !== \"\") {\n      props.addItem(title);\n      setTitle(\"\");\n    } else {\n      setError(\"Title is required\");\n    }\n  };\n\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (error !== null) {\n      setError(null);\n    }\n    if (e.key === \"Enter\") {\n      addItem();\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        variant=\"outlined\"\n        error={!!error}\n        value={title}\n        onChange={onChangeHandler}\n        onKeyPress={onKeyPressHandler}\n        label=\"Title\"\n        helperText={error}\n        disabled={props.entityStatus === \"loading\"}\n      />\n      <IconButton\n        color=\"primary\"\n        onClick={addItem}\n        disabled={props.entityStatus === \"loading\"}\n      >\n        <AddBox />\n      </IconButton>\n    </div>\n  );\n});\n","import React, { ChangeEvent, useState } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport { RequestStatusType } from \"../../app/app-reducer\";\n\ntype EditableSpanPropsType = {\n  value: string;\n  onChange: (newValue: string) => void;\n  entityStatus: RequestStatusType;\n};\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n  let [editMode, setEditMode] = useState(false);\n  let [title, setTitle] = useState(props.value);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n    setTitle(props.value);\n  };\n\n  const activateViewMode = () => {\n    setEditMode(false);\n    props.onChange(title);\n  };\n\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    <TextField\n      value={title}\n      onChange={changeTitle}\n      autoFocus\n      onBlur={activateViewMode}\n      disabled={props.entityStatus === \"loading\"}\n    />\n  ) : (\n    <span onDoubleClick={activateEditMode}>{props.value}</span>\n  );\n});\n","import React, { ChangeEvent, useCallback } from \"react\";\nimport { Checkbox, IconButton } from \"@material-ui/core\";\nimport { EditableSpan } from \"../../../../components/EditableSpan/EditableSpan\";\nimport { Delete } from \"@material-ui/icons\";\nimport { TaskStatuses, TaskType } from \"../../../../api/todolists-api\";\n\ntype TaskPropsType = {\n  task: TaskType;\n  todolistId: string;\n  changeTaskStatus: (\n    id: string,\n    status: TaskStatuses,\n    todolistId: string\n  ) => void;\n  changeTaskTitle: (\n    taskId: string,\n    newTitle: string,\n    todolistId: string\n  ) => void;\n  removeTask: (taskId: string, todolistId: string) => void;\n};\n\nexport const Task = React.memo(\n  ({\n    task,\n    changeTaskStatus,\n    changeTaskTitle,\n    removeTask,\n    todolistId,\n  }: TaskPropsType) => {\n    const onClickHandler = useCallback(() => removeTask(task.id, todolistId), [\n      task.id,\n      todolistId,\n      removeTask,\n    ]);\n\n    const onChangeHandler = useCallback(\n      (e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        changeTaskStatus(\n          task.id,\n          newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.Active,\n          todolistId\n        );\n      },\n      [task.id, todolistId, changeTaskStatus]\n    );\n\n    const onTitleChangeHandler = useCallback(\n      (newValue: string) => {\n        changeTaskTitle(task.id, newValue, todolistId);\n      },\n      [task.id, todolistId, changeTaskTitle]\n    );\n\n    return (\n      <div\n        key={task.id}\n        className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}\n      >\n        <Checkbox\n          checked={task.status === TaskStatuses.Completed}\n          color=\"primary\"\n          onChange={onChangeHandler}\n          disabled={task.entityStatus === \"loading\"}\n        />\n\n        <EditableSpan\n          value={task.title}\n          onChange={onTitleChangeHandler}\n          entityStatus={task.entityStatus}\n        />\n        <IconButton\n          onClick={onClickHandler}\n          disabled={task.entityStatus === \"loading\"}\n        >\n          <Delete />\n        </IconButton>\n      </div>\n    );\n  }\n);\n","import React, { useCallback } from \"react\";\nimport { AddItemForm } from \"../../../components/AddItemForm/AddItemForm\";\nimport { EditableSpan } from \"../../../components/EditableSpan/EditableSpan\";\nimport { Button, IconButton } from \"@material-ui/core\";\nimport { Delete } from \"@material-ui/icons\";\nimport { Task } from \"./Task/Task\";\nimport { TaskStatuses, TaskType } from \"../../../api/todolists-api\";\nimport { FilterValuesType } from \"../todolists-reducer\";\nimport { RequestStatusType } from \"../../../app/app-reducer\";\n\ntype TodolistPropsType = {\n  id: string;\n  title: string;\n  tasks: Array<TaskType>;\n  entityStatus: RequestStatusType;\n  changeFilter: (value: FilterValuesType, todolistId: string) => void;\n  addTask: (title: string, todolistId: string) => void;\n  changeTaskStatus: (\n    id: string,\n    status: TaskStatuses,\n    todolistId: string\n  ) => void;\n  changeTaskTitle: (\n    taskId: string,\n    newTitle: string,\n    todolistId: string\n  ) => void;\n  removeTask: (taskId: string, todolistId: string) => void;\n  removeTodolist: (id: string) => void;\n  changeTodolistTitle: (id: string, newTitle: string) => void;\n  filter: FilterValuesType;\n};\n\nexport const Todolist = React.memo(function ({\n  id,\n  filter,\n  removeTask,\n  changeTaskStatus,\n  entityStatus,\n  changeTaskTitle,\n  changeFilter,\n  title,\n  tasks,\n  changeTodolistTitle,\n  removeTodolist,\n  addTask,\n}: TodolistPropsType) {\n  const onTodolistRemove = () => {\n    removeTodolist(id);\n  };\n\n  const onTaskAdd = useCallback(\n    (title: string) => {\n      addTask(title, id);\n    },\n    [addTask, id]\n  );\n\n  const onTodolistTitleChange = useCallback(\n    (title: string) => {\n      changeTodolistTitle(id, title);\n    },\n    [id, changeTodolistTitle]\n  );\n\n  const onAllClickHandler = useCallback(() => changeFilter(\"all\", id), [\n    id,\n    changeFilter,\n  ]);\n\n  const onActiveClickHandler = useCallback(() => changeFilter(\"active\", id), [\n    id,\n    changeFilter,\n  ]);\n\n  const onCompletedClickHandler = useCallback(\n    () => changeFilter(\"completed\", id),\n    [id, changeFilter]\n  );\n\n  let tasksOfTodolist = tasks;\n\n  if (filter === \"active\") {\n    tasksOfTodolist = tasks.filter(\n      (task) => task.status === TaskStatuses.Active\n    );\n  }\n  if (filter === \"completed\") {\n    tasksOfTodolist = tasks.filter(\n      (task) => task.status === TaskStatuses.Completed\n    );\n  }\n\n  return (\n    <div>\n      <h3>\n        <EditableSpan\n          value={title}\n          onChange={onTodolistTitleChange}\n          entityStatus={entityStatus}\n        />\n        <IconButton\n          onClick={onTodolistRemove}\n          disabled={entityStatus === \"loading\"}\n        >\n          <Delete />\n        </IconButton>\n      </h3>\n      <AddItemForm addItem={onTaskAdd} entityStatus={entityStatus} />\n      <div>\n        {tasksOfTodolist.map((task) => (\n          <Task\n            key={task.id}\n            task={task}\n            todolistId={id}\n            removeTask={removeTask}\n            changeTaskTitle={changeTaskTitle}\n            changeTaskStatus={changeTaskStatus}\n          />\n        ))}\n      </div>\n      <div style={{ paddingTop: \"10px\" }}>\n        <Button\n          variant={filter === \"all\" ? \"outlined\" : \"text\"}\n          onClick={onAllClickHandler}\n          color={\"default\"}\n        >\n          All\n        </Button>\n        <Button\n          variant={filter === \"active\" ? \"outlined\" : \"text\"}\n          onClick={onActiveClickHandler}\n          color={\"primary\"}\n        >\n          Active\n        </Button>\n        <Button\n          variant={filter === \"completed\" ? \"outlined\" : \"text\"}\n          onClick={onCompletedClickHandler}\n          color={\"secondary\"}\n        >\n          Completed\n        </Button>\n      </div>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateType } from \"../../app/store\";\nimport {\n  addTodolistTC,\n  changeTodolistFilter,\n  changeTodolistTitleTC,\n  fetchTodolistsTC,\n  FilterValuesType,\n  removeTodolistTC,\n  TodolistDomainType,\n} from \"./todolists-reducer\";\nimport {\n  addTaskTC,\n  removeTaskTC,\n  TasksStateType,\n  updateTaskTC,\n} from \"./tasks-reducer\";\nimport { TaskStatuses } from \"../../api/todolists-api\";\nimport { Grid, Paper } from \"@material-ui/core\";\nimport { AddItemForm } from \"../../components/AddItemForm/AddItemForm\";\nimport { Todolist } from \"./Todolist/Todolist\";\nimport { Redirect } from \"react-router-dom\";\n\nexport const TodolistsList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(\n    (state) => state.todolists\n  );\n  const tasks = useSelector<AppRootStateType, TasksStateType>(\n    (state) => state.tasks\n  );\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\n    (state) => state.auth.isLoggedIn\n  );\n\n  useEffect(() => {\n    if (!isLoggedIn) return;\n    dispatch(fetchTodolistsTC());\n  }, [dispatch, isLoggedIn]);\n\n  const removeTask = useCallback(\n    function (id: string, todolistId: string) {\n      dispatch(removeTaskTC(id, todolistId));\n    },\n    [dispatch]\n  );\n\n  const addTask = useCallback(\n    function (title: string, todolistId: string) {\n      dispatch(addTaskTC(title, todolistId));\n    },\n    [dispatch]\n  );\n\n  const changeStatus = useCallback(\n    function (id: string, status: TaskStatuses, todolistId: string) {\n      dispatch(updateTaskTC(id, { status }, todolistId));\n    },\n    [dispatch]\n  );\n\n  const changeTaskTitle = useCallback(\n    function (id: string, newTitle: string, todolistId: string) {\n      dispatch(updateTaskTC(id, { title: newTitle }, todolistId));\n    },\n    [dispatch]\n  );\n\n  const changeFilter = useCallback(\n    function (filter: FilterValuesType, id: string) {\n      dispatch(changeTodolistFilter({ id, filter }));\n    },\n    [dispatch]\n  );\n\n  const removeTodolist = useCallback(\n    function (id: string) {\n      dispatch(removeTodolistTC(id));\n    },\n    [dispatch]\n  );\n\n  const changeTodolistTitle = useCallback(\n    function (id: string, title: string) {\n      dispatch(changeTodolistTitleTC(id, title));\n    },\n    [dispatch]\n  );\n\n  const addTodolist = useCallback(\n    (title: string) => {\n      dispatch(addTodolistTC(title));\n    },\n    [dispatch]\n  );\n\n  if (!isLoggedIn) {\n    return <Redirect to={\"/login\"} />;\n  } else {\n    return (\n      <>\n        <Grid container style={{ padding: \"20px\" }}>\n          <AddItemForm addItem={addTodolist} />\n        </Grid>\n        <Grid container spacing={3}>\n          {todolists.map((tl) => {\n            let allTodolistTasks = tasks[tl.id];\n\n            return (\n              <Grid item key={tl.id}>\n                <Paper style={{ padding: \"10px\" }}>\n                  <Todolist\n                    id={tl.id}\n                    title={tl.title}\n                    tasks={allTodolistTasks}\n                    entityStatus={tl.entityStatus}\n                    removeTask={removeTask}\n                    changeFilter={changeFilter}\n                    addTask={addTask}\n                    changeTaskStatus={changeStatus}\n                    filter={tl.filter}\n                    removeTodolist={removeTodolist}\n                    changeTaskTitle={changeTaskTitle}\n                    changeTodolistTitle={changeTodolistTitle}\n                  />\n                </Paper>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </>\n    );\n  }\n};\n","import React from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateType } from \"../../app/store\";\nimport { Dispatch } from \"redux\";\nimport { ErrorType, setAppError } from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport const ErrorSnackbar = () => {\n  const dispatch = useDispatch<Dispatch>();\n\n  const error = useSelector<AppRootStateType, ErrorType>(\n    (state) => state.app.error\n  );\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    dispatch(setAppError({ error: null }));\n  };\n\n  return (\n    /* if open === true - render <Snackbar /> */\n    <Snackbar\n      open={error !== null}\n      autoHideDuration={6000}\n      onClose={handleClose}\n    >\n      <Alert onClose={handleClose} severity=\"error\">\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n};\n","import React from \"react\";\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n  TextField,\n} from \"@material-ui/core\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginTC } from \"./auth-reducer\";\nimport { AppRootStateType } from \"../../app/store\";\nimport { Redirect } from \"react-router-dom\";\n\ntype FormikErrorsType = {\n  email?: string;\n  password?: string;\n  rememberMe?: boolean;\n};\n\nexport const Login = () => {\n  const dispatch = useDispatch();\n\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\n    (state) => state.auth.isLoggedIn\n  );\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n    // validate() is called on each form fields' change !\n    validate: (values) => {\n      const errors: FormikErrorsType = {};\n      if (!values.email) {\n        errors.email = \"Required field\";\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,10}$/i.test(values.email)\n      ) {\n        errors.email = \"Invalid email address\";\n      }\n\n      if (!values.password) {\n        errors.password = \"Required field\";\n      } else if (values.password.length <= 2) {\n        errors.password = \"Password must contain at least 3 characters\";\n      }\n\n      return errors;\n    },\n    onSubmit: (values) => {\n      dispatch(loginTC(values));\n      formik.resetForm(); // clearing all form fields on form submitting\n    },\n  });\n\n  if (isLoggedIn) {\n    /* redirecting to todolists if isLoggedIn === true */\n    return <Redirect to={\"/\"} />;\n  } else {\n    return (\n      <Grid container justify=\"center\">\n        <Grid item xs={4}>\n          <form onSubmit={formik.handleSubmit}>\n            <FormControl>\n              <FormLabel>\n                <p>\n                  {\"Sign up to log in \"}\n                  <a\n                    href={\"https://social-network.samuraijs.com/\"}\n                    target={\"_blank\"}\n                    rel={\"noreferrer\"}\n                  >\n                    here\n                  </a>\n                </p>\n                <p>or use common test account credentials:</p>\n                <p>Email: free@samuraijs.com</p>\n                <p>Password: free</p>\n              </FormLabel>\n              <FormGroup>\n                <TextField\n                  label=\"Email\"\n                  margin=\"normal\"\n                  {...formik.getFieldProps(\n                    \"email\"\n                  )} /* reducing boilerplate code from above by ...formik.getFieldProps() ! */\n                />\n                {formik.touched.email && formik.errors.email && (\n                  <div style={{ color: \"red\" }}>{formik.errors.email}</div>\n                )}\n                <TextField\n                  type=\"password\"\n                  label=\"Password\"\n                  margin=\"normal\"\n                  {...formik.getFieldProps(\"password\")}\n                />\n                {formik.touched.password && formik.errors.password && (\n                  <div style={{ color: \"red\" }}>{formik.errors.password}</div>\n                )}\n                <FormControlLabel\n                  label={\"Remember me\"}\n                  control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} />}\n                />\n                <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\n                  Login\n                </Button>\n              </FormGroup>\n            </FormControl>\n          </form>\n        </Grid>\n      </Grid>\n    );\n  }\n};\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  AppBar,\n  Button,\n  CircularProgress,\n  Container,\n  IconButton,\n  LinearProgress,\n  Toolbar,\n} from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport { TodolistsList } from \"../features/TodolistsList/TodolistsList\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppRootStateType } from \"./store\";\nimport { initializeAppTC, RequestStatusType } from \"./app-reducer\";\nimport { ErrorSnackbar } from \"../components/ErrorSnackbar/ErrorSnackbar\";\nimport { logoutTC } from \"../features/Login/auth-reducer\";\nimport { Login } from \"../features/Login/Login\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\n\nexport const App = () => {\n  const dispatch = useDispatch();\n\n  const status = useSelector<AppRootStateType, RequestStatusType>(\n    (state) => state.app.status\n  );\n  const isInitialized = useSelector<AppRootStateType, boolean>(\n    (state) => state.app.isInitialized\n  );\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\n    (state) => state.auth.isLoggedIn\n  );\n\n  useEffect(() => {\n    dispatch(initializeAppTC());\n  }, [dispatch]);\n\n  const logoutHandler = () => dispatch(logoutTC());\n\n  if (!isInitialized) {\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          top: \"30%\",\n          textAlign: \"center\",\n          width: \"100%\",\n        }}\n      >\n        <CircularProgress />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <ErrorSnackbar />\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n              <Menu />\n            </IconButton>\n            {/* only displayed when isLoggedIn === true */}\n            {isLoggedIn && (\n              <Button onClick={logoutHandler} color=\"inherit\">\n                Logout\n              </Button>\n            )}\n          </Toolbar>\n        </AppBar>\n        {status === \"loading\" && <LinearProgress color=\"secondary\" />}\n        <Container fixed>\n          <Switch>\n            {/* <Switch/> - imported from react-router-dom - renders first <Route/>, for which path === true */}\n            <Route exact path={\"/\"} render={() => <TodolistsList />} />\n            <Route path={\"/login\"} render={() => <Login />} />\n            <Route path={\"/404\"} render={() => <h1>404: PAGE NOT FOUND</h1>} />\n            <Redirect from={\"*\"} to={\"/404\"} />\n            {/* path={\"*\"} === ANY path ; inside of <Switch/> <Route path={\"*\"} /> should always be the last ! */}\n          </Switch>\n        </Container>\n      </div>\n    );\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./app/store\";\nimport { App } from \"./app/App\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}